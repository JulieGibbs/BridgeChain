// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pochuman/observe_vote.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ObserveVote struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Txhash  string `protobuf:"bytes,3,opt,name=txhash,proto3" json:"txhash,omitempty"`
	From    string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Amount  string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Txtime  string `protobuf:"bytes,7,opt,name=txtime,proto3" json:"txtime,omitempty"`
	ChainId string `protobuf:"bytes,8,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Used    string `protobuf:"bytes,9,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *ObserveVote) Reset()         { *m = ObserveVote{} }
func (m *ObserveVote) String() string { return proto.CompactTextString(m) }
func (*ObserveVote) ProtoMessage()    {}
func (*ObserveVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5bb922194c38e6, []int{0}
}
func (m *ObserveVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObserveVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObserveVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObserveVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveVote.Merge(m, src)
}
func (m *ObserveVote) XXX_Size() int {
	return m.Size()
}
func (m *ObserveVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveVote.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveVote proto.InternalMessageInfo

func (m *ObserveVote) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ObserveVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ObserveVote) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *ObserveVote) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ObserveVote) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ObserveVote) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ObserveVote) GetTxtime() string {
	if m != nil {
		return m.Txtime
	}
	return ""
}

func (m *ObserveVote) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ObserveVote) GetUsed() string {
	if m != nil {
		return m.Used
	}
	return ""
}

func init() {
	proto.RegisterType((*ObserveVote)(nil), "vigorousdeveloper.pochuman.pochuman.ObserveVote")
}

func init() { proto.RegisterFile("pochuman/observe_vote.proto", fileDescriptor_ba5bb922194c38e6) }

var fileDescriptor_ba5bb922194c38e6 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0xb3, 0xf1, 0x2e, 0xe7, 0xad, 0x60, 0xb1, 0x88, 0x2c, 0x08, 0x8b, 0x68, 0x63, 0x63,
	0x52, 0x58, 0xd8, 0x8b, 0x8d, 0x95, 0x68, 0x71, 0x85, 0x8d, 0xe4, 0xcf, 0x78, 0x09, 0x98, 0x4c,
	0xd8, 0xcc, 0x86, 0xf8, 0x2d, 0xfc, 0x58, 0x96, 0xd7, 0x69, 0x29, 0xc9, 0x17, 0x39, 0xb2, 0x9b,
	0x5c, 0xf7, 0x7e, 0x6f, 0xf7, 0xcd, 0x0c, 0x8f, 0x5f, 0xd4, 0x98, 0xe6, 0xa6, 0x8c, 0xab, 0x08,
	0x93, 0x06, 0x74, 0x0b, 0xef, 0x2d, 0x12, 0x84, 0xb5, 0x46, 0x42, 0x71, 0xdd, 0x16, 0x5b, 0xd4,
	0x68, 0x9a, 0x0c, 0x5a, 0xf8, 0xc4, 0x1a, 0x74, 0x38, 0x7f, 0x3f, 0x88, 0xab, 0x5f, 0xc6, 0x4f,
	0x9e, 0x5d, 0x76, 0x83, 0x04, 0xe2, 0x8c, 0x2f, 0x8b, 0x2a, 0x83, 0x4e, 0xb2, 0x4b, 0x76, 0xb3,
	0x7e, 0x75, 0x20, 0x24, 0x5f, 0xa5, 0x1a, 0x62, 0x42, 0x2d, 0x7d, 0xeb, 0xcf, 0x28, 0xce, 0x79,
	0x40, 0x5d, 0x1e, 0x37, 0xb9, 0x3c, 0xb2, 0x0f, 0x13, 0x09, 0xc1, 0x17, 0x1f, 0x1a, 0x4b, 0xb9,
	0xb0, 0xae, 0xd5, 0xe2, 0x94, 0xfb, 0x84, 0x72, 0x69, 0x1d, 0x9f, 0x70, 0xcc, 0xc6, 0x25, 0x9a,
	0x8a, 0x64, 0xe0, 0xb2, 0x8e, 0xdc, 0x4c, 0x2a, 0x4a, 0x90, 0xab, 0x79, 0xe6, 0x48, 0xf6, 0x8a,
	0x3c, 0x2e, 0xaa, 0xa7, 0x4c, 0x1e, 0x4f, 0x57, 0x38, 0x1c, 0xb7, 0x99, 0x06, 0x32, 0xb9, 0x76,
	0xdb, 0x46, 0xfd, 0xf0, 0xf2, 0xd3, 0x2b, 0xb6, 0xeb, 0x15, 0xfb, 0xef, 0x15, 0xfb, 0x1e, 0x94,
	0xb7, 0x1b, 0x94, 0xf7, 0x37, 0x28, 0xef, 0xed, 0x7e, 0x5b, 0x50, 0x6e, 0x92, 0x30, 0xc5, 0x32,
	0xda, 0x4c, 0x1d, 0x3d, 0xce, 0x1d, 0x45, 0x35, 0xa6, 0xb7, 0xae, 0xd3, 0x2e, 0x3a, 0xd4, 0x4b,
	0x5f, 0x35, 0x34, 0x49, 0x60, 0x8b, 0xbd, 0xdb, 0x07, 0x00, 0x00, 0xff, 0xff, 0x14, 0xfc, 0x2c,
	0x81, 0x77, 0x01, 0x00, 0x00,
}

func (m *ObserveVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObserveVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObserveVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Used) > 0 {
		i -= len(m.Used)
		copy(dAtA[i:], m.Used)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Used)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Txtime) > 0 {
		i -= len(m.Txtime)
		copy(dAtA[i:], m.Txtime)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Txtime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintObserveVote(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObserveVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovObserveVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObserveVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.Txtime)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	l = len(m.Used)
	if l > 0 {
		n += 1 + l + sovObserveVote(uint64(l))
	}
	return n
}

func sovObserveVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObserveVote(x uint64) (n int) {
	return sovObserveVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObserveVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObserveVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObserveVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObserveVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObserveVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObserveVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObserveVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObserveVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObserveVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObserveVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObserveVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObserveVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObserveVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObserveVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObserveVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObserveVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObserveVote = fmt.Errorf("proto: unexpected end of group")
)
