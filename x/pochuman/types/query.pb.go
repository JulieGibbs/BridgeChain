// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pochuman/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetFeeBalanceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetFeeBalanceRequest) Reset()         { *m = QueryGetFeeBalanceRequest{} }
func (m *QueryGetFeeBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeBalanceRequest) ProtoMessage()    {}
func (*QueryGetFeeBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{2}
}
func (m *QueryGetFeeBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeBalanceRequest.Merge(m, src)
}
func (m *QueryGetFeeBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeBalanceRequest proto.InternalMessageInfo

func (m *QueryGetFeeBalanceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetFeeBalanceResponse struct {
	FeeBalance FeeBalance `protobuf:"bytes,1,opt,name=feeBalance,proto3" json:"feeBalance"`
}

func (m *QueryGetFeeBalanceResponse) Reset()         { *m = QueryGetFeeBalanceResponse{} }
func (m *QueryGetFeeBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeBalanceResponse) ProtoMessage()    {}
func (*QueryGetFeeBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{3}
}
func (m *QueryGetFeeBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeBalanceResponse.Merge(m, src)
}
func (m *QueryGetFeeBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeBalanceResponse proto.InternalMessageInfo

func (m *QueryGetFeeBalanceResponse) GetFeeBalance() FeeBalance {
	if m != nil {
		return m.FeeBalance
	}
	return FeeBalance{}
}

type QueryAllFeeBalanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeBalanceRequest) Reset()         { *m = QueryAllFeeBalanceRequest{} }
func (m *QueryAllFeeBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeBalanceRequest) ProtoMessage()    {}
func (*QueryAllFeeBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{4}
}
func (m *QueryAllFeeBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeBalanceRequest.Merge(m, src)
}
func (m *QueryAllFeeBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeBalanceRequest proto.InternalMessageInfo

func (m *QueryAllFeeBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeeBalanceResponse struct {
	FeeBalance []FeeBalance        `protobuf:"bytes,1,rep,name=feeBalance,proto3" json:"feeBalance"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeBalanceResponse) Reset()         { *m = QueryAllFeeBalanceResponse{} }
func (m *QueryAllFeeBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeBalanceResponse) ProtoMessage()    {}
func (*QueryAllFeeBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{5}
}
func (m *QueryAllFeeBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeBalanceResponse.Merge(m, src)
}
func (m *QueryAllFeeBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeBalanceResponse proto.InternalMessageInfo

func (m *QueryAllFeeBalanceResponse) GetFeeBalance() []FeeBalance {
	if m != nil {
		return m.FeeBalance
	}
	return nil
}

func (m *QueryAllFeeBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKeysignVoteDataRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetKeysignVoteDataRequest) Reset()         { *m = QueryGetKeysignVoteDataRequest{} }
func (m *QueryGetKeysignVoteDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeysignVoteDataRequest) ProtoMessage()    {}
func (*QueryGetKeysignVoteDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{6}
}
func (m *QueryGetKeysignVoteDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeysignVoteDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeysignVoteDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeysignVoteDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeysignVoteDataRequest.Merge(m, src)
}
func (m *QueryGetKeysignVoteDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeysignVoteDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeysignVoteDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeysignVoteDataRequest proto.InternalMessageInfo

func (m *QueryGetKeysignVoteDataRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetKeysignVoteDataResponse struct {
	KeysignVoteData KeysignVoteData `protobuf:"bytes,1,opt,name=keysignVoteData,proto3" json:"keysignVoteData"`
}

func (m *QueryGetKeysignVoteDataResponse) Reset()         { *m = QueryGetKeysignVoteDataResponse{} }
func (m *QueryGetKeysignVoteDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeysignVoteDataResponse) ProtoMessage()    {}
func (*QueryGetKeysignVoteDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{7}
}
func (m *QueryGetKeysignVoteDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeysignVoteDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeysignVoteDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeysignVoteDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeysignVoteDataResponse.Merge(m, src)
}
func (m *QueryGetKeysignVoteDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeysignVoteDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeysignVoteDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeysignVoteDataResponse proto.InternalMessageInfo

func (m *QueryGetKeysignVoteDataResponse) GetKeysignVoteData() KeysignVoteData {
	if m != nil {
		return m.KeysignVoteData
	}
	return KeysignVoteData{}
}

type QueryAllKeysignVoteDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeysignVoteDataRequest) Reset()         { *m = QueryAllKeysignVoteDataRequest{} }
func (m *QueryAllKeysignVoteDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeysignVoteDataRequest) ProtoMessage()    {}
func (*QueryAllKeysignVoteDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{8}
}
func (m *QueryAllKeysignVoteDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeysignVoteDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeysignVoteDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeysignVoteDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeysignVoteDataRequest.Merge(m, src)
}
func (m *QueryAllKeysignVoteDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeysignVoteDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeysignVoteDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeysignVoteDataRequest proto.InternalMessageInfo

func (m *QueryAllKeysignVoteDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKeysignVoteDataResponse struct {
	KeysignVoteData []KeysignVoteData   `protobuf:"bytes,1,rep,name=keysignVoteData,proto3" json:"keysignVoteData"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeysignVoteDataResponse) Reset()         { *m = QueryAllKeysignVoteDataResponse{} }
func (m *QueryAllKeysignVoteDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeysignVoteDataResponse) ProtoMessage()    {}
func (*QueryAllKeysignVoteDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{9}
}
func (m *QueryAllKeysignVoteDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeysignVoteDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeysignVoteDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeysignVoteDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeysignVoteDataResponse.Merge(m, src)
}
func (m *QueryAllKeysignVoteDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeysignVoteDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeysignVoteDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeysignVoteDataResponse proto.InternalMessageInfo

func (m *QueryAllKeysignVoteDataResponse) GetKeysignVoteData() []KeysignVoteData {
	if m != nil {
		return m.KeysignVoteData
	}
	return nil
}

func (m *QueryAllKeysignVoteDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetObserveVoteRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetObserveVoteRequest) Reset()         { *m = QueryGetObserveVoteRequest{} }
func (m *QueryGetObserveVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetObserveVoteRequest) ProtoMessage()    {}
func (*QueryGetObserveVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{10}
}
func (m *QueryGetObserveVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetObserveVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetObserveVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetObserveVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetObserveVoteRequest.Merge(m, src)
}
func (m *QueryGetObserveVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetObserveVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetObserveVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetObserveVoteRequest proto.InternalMessageInfo

func (m *QueryGetObserveVoteRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetObserveVoteResponse struct {
	ObserveVote ObserveVote `protobuf:"bytes,1,opt,name=observeVote,proto3" json:"observeVote"`
}

func (m *QueryGetObserveVoteResponse) Reset()         { *m = QueryGetObserveVoteResponse{} }
func (m *QueryGetObserveVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetObserveVoteResponse) ProtoMessage()    {}
func (*QueryGetObserveVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{11}
}
func (m *QueryGetObserveVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetObserveVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetObserveVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetObserveVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetObserveVoteResponse.Merge(m, src)
}
func (m *QueryGetObserveVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetObserveVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetObserveVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetObserveVoteResponse proto.InternalMessageInfo

func (m *QueryGetObserveVoteResponse) GetObserveVote() ObserveVote {
	if m != nil {
		return m.ObserveVote
	}
	return ObserveVote{}
}

type QueryAllObserveVoteRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllObserveVoteRequest) Reset()         { *m = QueryAllObserveVoteRequest{} }
func (m *QueryAllObserveVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllObserveVoteRequest) ProtoMessage()    {}
func (*QueryAllObserveVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{12}
}
func (m *QueryAllObserveVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllObserveVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllObserveVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllObserveVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllObserveVoteRequest.Merge(m, src)
}
func (m *QueryAllObserveVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllObserveVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllObserveVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllObserveVoteRequest proto.InternalMessageInfo

func (m *QueryAllObserveVoteRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllObserveVoteResponse struct {
	ObserveVote []ObserveVote       `protobuf:"bytes,1,rep,name=observeVote,proto3" json:"observeVote"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllObserveVoteResponse) Reset()         { *m = QueryAllObserveVoteResponse{} }
func (m *QueryAllObserveVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllObserveVoteResponse) ProtoMessage()    {}
func (*QueryAllObserveVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{13}
}
func (m *QueryAllObserveVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllObserveVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllObserveVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllObserveVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllObserveVoteResponse.Merge(m, src)
}
func (m *QueryAllObserveVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllObserveVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllObserveVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllObserveVoteResponse proto.InternalMessageInfo

func (m *QueryAllObserveVoteResponse) GetObserveVote() []ObserveVote {
	if m != nil {
		return m.ObserveVote
	}
	return nil
}

func (m *QueryAllObserveVoteResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolBalanceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPoolBalanceRequest) Reset()         { *m = QueryGetPoolBalanceRequest{} }
func (m *QueryGetPoolBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolBalanceRequest) ProtoMessage()    {}
func (*QueryGetPoolBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{14}
}
func (m *QueryGetPoolBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolBalanceRequest.Merge(m, src)
}
func (m *QueryGetPoolBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolBalanceRequest proto.InternalMessageInfo

func (m *QueryGetPoolBalanceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetPoolBalanceResponse struct {
	PoolBalance PoolBalance `protobuf:"bytes,1,opt,name=poolBalance,proto3" json:"poolBalance"`
}

func (m *QueryGetPoolBalanceResponse) Reset()         { *m = QueryGetPoolBalanceResponse{} }
func (m *QueryGetPoolBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolBalanceResponse) ProtoMessage()    {}
func (*QueryGetPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{15}
}
func (m *QueryGetPoolBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolBalanceResponse.Merge(m, src)
}
func (m *QueryGetPoolBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolBalanceResponse proto.InternalMessageInfo

func (m *QueryGetPoolBalanceResponse) GetPoolBalance() PoolBalance {
	if m != nil {
		return m.PoolBalance
	}
	return PoolBalance{}
}

type QueryAllPoolBalanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolBalanceRequest) Reset()         { *m = QueryAllPoolBalanceRequest{} }
func (m *QueryAllPoolBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolBalanceRequest) ProtoMessage()    {}
func (*QueryAllPoolBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{16}
}
func (m *QueryAllPoolBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolBalanceRequest.Merge(m, src)
}
func (m *QueryAllPoolBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolBalanceRequest proto.InternalMessageInfo

func (m *QueryAllPoolBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolBalanceResponse struct {
	PoolBalance []PoolBalance       `protobuf:"bytes,1,rep,name=poolBalance,proto3" json:"poolBalance"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolBalanceResponse) Reset()         { *m = QueryAllPoolBalanceResponse{} }
func (m *QueryAllPoolBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolBalanceResponse) ProtoMessage()    {}
func (*QueryAllPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{17}
}
func (m *QueryAllPoolBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolBalanceResponse.Merge(m, src)
}
func (m *QueryAllPoolBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolBalanceResponse proto.InternalMessageInfo

func (m *QueryAllPoolBalanceResponse) GetPoolBalance() []PoolBalance {
	if m != nil {
		return m.PoolBalance
	}
	return nil
}

func (m *QueryAllPoolBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTransactionDataRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTransactionDataRequest) Reset()         { *m = QueryGetTransactionDataRequest{} }
func (m *QueryGetTransactionDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransactionDataRequest) ProtoMessage()    {}
func (*QueryGetTransactionDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{18}
}
func (m *QueryGetTransactionDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransactionDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransactionDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransactionDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransactionDataRequest.Merge(m, src)
}
func (m *QueryGetTransactionDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransactionDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransactionDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransactionDataRequest proto.InternalMessageInfo

func (m *QueryGetTransactionDataRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTransactionDataResponse struct {
	TransactionData TransactionData `protobuf:"bytes,1,opt,name=transactionData,proto3" json:"transactionData"`
}

func (m *QueryGetTransactionDataResponse) Reset()         { *m = QueryGetTransactionDataResponse{} }
func (m *QueryGetTransactionDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransactionDataResponse) ProtoMessage()    {}
func (*QueryGetTransactionDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{19}
}
func (m *QueryGetTransactionDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransactionDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransactionDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransactionDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransactionDataResponse.Merge(m, src)
}
func (m *QueryGetTransactionDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransactionDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransactionDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransactionDataResponse proto.InternalMessageInfo

func (m *QueryGetTransactionDataResponse) GetTransactionData() TransactionData {
	if m != nil {
		return m.TransactionData
	}
	return TransactionData{}
}

type QueryAllTransactionDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransactionDataRequest) Reset()         { *m = QueryAllTransactionDataRequest{} }
func (m *QueryAllTransactionDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransactionDataRequest) ProtoMessage()    {}
func (*QueryAllTransactionDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{20}
}
func (m *QueryAllTransactionDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransactionDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransactionDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransactionDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransactionDataRequest.Merge(m, src)
}
func (m *QueryAllTransactionDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransactionDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransactionDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransactionDataRequest proto.InternalMessageInfo

func (m *QueryAllTransactionDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTransactionDataResponse struct {
	TransactionData []TransactionData   `protobuf:"bytes,1,rep,name=transactionData,proto3" json:"transactionData"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransactionDataResponse) Reset()         { *m = QueryAllTransactionDataResponse{} }
func (m *QueryAllTransactionDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransactionDataResponse) ProtoMessage()    {}
func (*QueryAllTransactionDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0a764eba4727e0, []int{21}
}
func (m *QueryAllTransactionDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransactionDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransactionDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransactionDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransactionDataResponse.Merge(m, src)
}
func (m *QueryAllTransactionDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransactionDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransactionDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransactionDataResponse proto.InternalMessageInfo

func (m *QueryAllTransactionDataResponse) GetTransactionData() []TransactionData {
	if m != nil {
		return m.TransactionData
	}
	return nil
}

func (m *QueryAllTransactionDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryParamsResponse")
	proto.RegisterType((*QueryGetFeeBalanceRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetFeeBalanceRequest")
	proto.RegisterType((*QueryGetFeeBalanceResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetFeeBalanceResponse")
	proto.RegisterType((*QueryAllFeeBalanceRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllFeeBalanceRequest")
	proto.RegisterType((*QueryAllFeeBalanceResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllFeeBalanceResponse")
	proto.RegisterType((*QueryGetKeysignVoteDataRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetKeysignVoteDataRequest")
	proto.RegisterType((*QueryGetKeysignVoteDataResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetKeysignVoteDataResponse")
	proto.RegisterType((*QueryAllKeysignVoteDataRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllKeysignVoteDataRequest")
	proto.RegisterType((*QueryAllKeysignVoteDataResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllKeysignVoteDataResponse")
	proto.RegisterType((*QueryGetObserveVoteRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetObserveVoteRequest")
	proto.RegisterType((*QueryGetObserveVoteResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetObserveVoteResponse")
	proto.RegisterType((*QueryAllObserveVoteRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllObserveVoteRequest")
	proto.RegisterType((*QueryAllObserveVoteResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllObserveVoteResponse")
	proto.RegisterType((*QueryGetPoolBalanceRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetPoolBalanceRequest")
	proto.RegisterType((*QueryGetPoolBalanceResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetPoolBalanceResponse")
	proto.RegisterType((*QueryAllPoolBalanceRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllPoolBalanceRequest")
	proto.RegisterType((*QueryAllPoolBalanceResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllPoolBalanceResponse")
	proto.RegisterType((*QueryGetTransactionDataRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetTransactionDataRequest")
	proto.RegisterType((*QueryGetTransactionDataResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryGetTransactionDataResponse")
	proto.RegisterType((*QueryAllTransactionDataRequest)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllTransactionDataRequest")
	proto.RegisterType((*QueryAllTransactionDataResponse)(nil), "vigorousdeveloper.pochuman.pochuman.QueryAllTransactionDataResponse")
}

func init() { proto.RegisterFile("pochuman/query.proto", fileDescriptor_9c0a764eba4727e0) }

var fileDescriptor_9c0a764eba4727e0 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0xf3, 0x34,
	0x1c, 0xc6, 0xeb, 0xb7, 0xbc, 0x93, 0xf0, 0x04, 0x93, 0x4c, 0x91, 0x20, 0x2f, 0xea, 0xa6, 0x20,
	0x01, 0xe2, 0x47, 0x42, 0xbb, 0x69, 0xbf, 0x40, 0xdb, 0xda, 0x4d, 0x9b, 0x10, 0x07, 0xb6, 0x0a,
	0x26, 0xc4, 0x65, 0xb8, 0xad, 0x97, 0x55, 0x4b, 0xe3, 0xac, 0x49, 0xcb, 0x26, 0xc4, 0x85, 0x0b,
	0x57, 0x24, 0xfe, 0x12, 0xee, 0x1c, 0x10, 0xa7, 0x49, 0x1c, 0xa8, 0x04, 0x07, 0x4e, 0x30, 0x6d,
	0xe3, 0xff, 0x40, 0x75, 0x9c, 0xc4, 0x49, 0x93, 0xbe, 0x71, 0x9b, 0xde, 0xba, 0xd8, 0x7e, 0xfc,
	0xfd, 0xf8, 0x71, 0xbe, 0x7b, 0x5a, 0x58, 0xb2, 0x69, 0xeb, 0xa2, 0xdf, 0xc5, 0x96, 0x7e, 0xd5,
	0x27, 0xbd, 0x1b, 0xcd, 0xee, 0x51, 0x97, 0xa2, 0x37, 0x07, 0x1d, 0x83, 0xf6, 0x68, 0xdf, 0x69,
	0x93, 0x01, 0x31, 0xa9, 0x4d, 0x7a, 0x9a, 0x3f, 0x2f, 0xf8, 0xa0, 0x94, 0x0c, 0x6a, 0x50, 0x36,
	0x5f, 0x1f, 0x7d, 0xf2, 0x96, 0x2a, 0x6f, 0x18, 0x94, 0x1a, 0x26, 0xd1, 0xb1, 0xdd, 0xd1, 0xb1,
	0x65, 0x51, 0x17, 0xbb, 0x1d, 0x6a, 0x39, 0x7c, 0xf4, 0xdd, 0x16, 0x75, 0xba, 0xd4, 0xd1, 0x9b,
	0xd8, 0x21, 0xde, 0x8e, 0xfa, 0xa0, 0xd2, 0x24, 0x2e, 0xae, 0xe8, 0x36, 0x36, 0x3a, 0x16, 0x9b,
	0xcc, 0xe7, 0xbe, 0x1a, 0x94, 0x66, 0xe3, 0x1e, 0xee, 0xfa, 0x12, 0x4a, 0xf0, 0xf8, 0x9c, 0x90,
	0xb3, 0x26, 0x36, 0xb1, 0xd5, 0x22, 0x7c, 0x6c, 0x25, 0x18, 0xbb, 0x24, 0x37, 0x4e, 0xc7, 0xb0,
	0xce, 0x06, 0xd4, 0x25, 0x67, 0x6d, 0xec, 0x62, 0x3e, 0xe3, 0x59, 0x30, 0x83, 0x36, 0x1d, 0xd2,
	0x1b, 0x10, 0x36, 0x63, 0x6c, 0xd0, 0xa6, 0xd4, 0x8c, 0x69, 0x2f, 0x07, 0x83, 0x6e, 0x0f, 0x5b,
	0x0e, 0x6e, 0x8d, 0x4a, 0x15, 0xa4, 0xd5, 0x12, 0x44, 0x27, 0x23, 0xa2, 0x63, 0x56, 0x6d, 0x83,
	0x5c, 0xf5, 0x89, 0xe3, 0xaa, 0x5f, 0xc3, 0x57, 0x22, 0x4f, 0x1d, 0x9b, 0x5a, 0x0e, 0x41, 0x9f,
	0xc0, 0x05, 0x8f, 0xea, 0x35, 0xb0, 0x02, 0xde, 0x59, 0xac, 0xbe, 0xa7, 0x65, 0x38, 0x72, 0xcd,
	0x13, 0xa9, 0xbf, 0x70, 0xfb, 0xcf, 0x72, 0xa1, 0xc1, 0x05, 0xd4, 0x0a, 0x7c, 0x9d, 0xed, 0x70,
	0x44, 0xdc, 0x43, 0x42, 0xea, 0x5e, 0xd1, 0x7c, 0x7b, 0x54, 0x82, 0x4f, 0x3b, 0x56, 0x9b, 0x5c,
	0xb3, 0x6d, 0x5e, 0x6c, 0x78, 0x7f, 0xa8, 0x0e, 0x54, 0x92, 0x96, 0xf0, 0xda, 0xbe, 0x80, 0xf0,
	0x3c, 0x78, 0xca, 0xeb, 0xd3, 0x33, 0xd5, 0x17, 0x8a, 0xf1, 0x1a, 0x05, 0x21, 0xb5, 0xc5, 0xeb,
	0xac, 0x99, 0xe6, 0x78, 0x9d, 0x87, 0x10, 0x86, 0x17, 0x80, 0xef, 0xf9, 0x96, 0xe6, 0xdd, 0x16,
	0x6d, 0x74, 0x5b, 0x34, 0xef, 0x7e, 0xf2, 0xdb, 0xa2, 0x1d, 0x63, 0xc3, 0x5f, 0xdb, 0x10, 0x56,
	0xaa, 0xbf, 0x00, 0x8e, 0x16, 0xdb, 0x25, 0x05, 0xad, 0x98, 0x0b, 0x1a, 0x3a, 0x8a, 0x54, 0xff,
	0x84, 0x55, 0xff, 0xf6, 0x73, 0xab, 0xf7, 0x6a, 0x8a, 0x94, 0xbf, 0x0e, 0xcb, 0xbe, 0x31, 0x9f,
	0x7a, 0x37, 0xf8, 0x94, 0xba, 0xe4, 0x00, 0xbb, 0x78, 0xb2, 0xa1, 0x3f, 0x00, 0xb8, 0x9c, 0xba,
	0x90, 0xb3, 0xb7, 0xe1, 0xd2, 0x65, 0x74, 0x88, 0x9f, 0xf3, 0x5a, 0xa6, 0x03, 0x88, 0xc9, 0xf2,
	0x53, 0x88, 0x4b, 0xaa, 0x17, 0x9c, 0xa0, 0x66, 0x9a, 0x29, 0x04, 0x79, 0x59, 0x3d, 0xf4, 0x99,
	0x93, 0xb6, 0x9a, 0xc4, 0x5c, 0xcc, 0x99, 0x39, 0x3f, 0xfb, 0xab, 0xe1, 0x7b, 0xf9, 0x99, 0xd7,
	0x9e, 0x46, 0x7b, 0x4c, 0xb6, 0xfe, 0x1b, 0xf8, 0x2c, 0x71, 0x0d, 0x3f, 0x81, 0x2f, 0xe1, 0x22,
	0x0d, 0x1f, 0xf3, 0xe3, 0xfe, 0x30, 0x13, 0xbd, 0x20, 0xc7, 0xc9, 0x45, 0x29, 0xb5, 0x1d, 0xbe,
	0x69, 0x09, 0xc5, 0xe6, 0xe5, 0xf2, 0xaf, 0x80, 0xf3, 0xc5, 0xb7, 0x49, 0xe3, 0x2b, 0xe6, 0xc4,
	0x37, 0x17, 0x57, 0x8f, 0x29, 0x35, 0x33, 0x75, 0x68, 0xc1, 0xd5, 0xc8, 0x9a, 0x90, 0xda, 0x0e,
	0x1f, 0x4b, 0xb9, 0x2a, 0xc8, 0xf9, 0xd4, 0x82, 0x94, 0xe8, 0x6a, 0x42, 0xb1, 0xf3, 0x70, 0x35,
	0x13, 0x5f, 0x31, 0x27, 0xbe, 0xb9, 0xb4, 0xea, 0xcf, 0xc3, 0x40, 0x20, 0xd7, 0xaa, 0xc7, 0x16,
	0x86, 0x6d, 0xcb, 0x8d, 0x0e, 0x49, 0xb5, 0xea, 0x98, 0xac, 0xdf, 0xb6, 0x62, 0x92, 0x62, 0xab,
	0x4e, 0x21, 0x98, 0x47, 0xab, 0x96, 0x62, 0x2e, 0xe6, 0xcc, 0x9c, 0x9b, 0xfd, 0xd5, 0xdf, 0x10,
	0x7c, 0xca, 0x90, 0xd0, 0xcf, 0x00, 0x2e, 0x78, 0xc1, 0x0c, 0x6d, 0x64, 0x2a, 0x75, 0x3c, 0x25,
	0x2a, 0x9b, 0xf2, 0x0b, 0xbd, 0x9a, 0xd4, 0xb5, 0xef, 0xff, 0x7c, 0xfc, 0xe9, 0x89, 0x86, 0xde,
	0xd7, 0x4f, 0xb9, 0xc2, 0x81, 0xaf, 0xa0, 0xdb, 0xb4, 0xf5, 0x81, 0x9f, 0x67, 0x23, 0x51, 0x1a,
	0x0d, 0x01, 0x84, 0x61, 0xa2, 0x41, 0x3b, 0xd9, 0xb7, 0x4f, 0x4a, 0x99, 0xca, 0xee, 0xd4, 0xeb,
	0x39, 0x45, 0x8d, 0x51, 0x7c, 0x84, 0xb6, 0xb2, 0x51, 0x08, 0xc9, 0x5f, 0xff, 0x96, 0xbd, 0x56,
	0xdf, 0xa1, 0xdf, 0x01, 0x7c, 0x29, 0x54, 0xae, 0x99, 0xa6, 0x0c, 0x55, 0x52, 0x26, 0x95, 0xa1,
	0x4a, 0x4c, 0x9b, 0xea, 0x16, 0xa3, 0x5a, 0x45, 0x15, 0x69, 0x2a, 0xf4, 0x1f, 0x80, 0x4b, 0xb1,
	0xf4, 0x81, 0xf6, 0xa5, 0x4e, 0x39, 0x39, 0x7d, 0x29, 0x07, 0xb3, 0x89, 0x70, 0xb2, 0x23, 0x46,
	0x56, 0x43, 0xbb, 0xd9, 0xc8, 0xc6, 0xbe, 0x8d, 0x05, 0xae, 0xdd, 0x01, 0x88, 0x62, 0x9b, 0x8c,
	0xac, 0xdb, 0x97, 0x3a, 0xfa, 0xd9, 0x51, 0xd3, 0x23, 0xa4, 0xba, 0xcb, 0x50, 0xb7, 0xd0, 0xc6,
	0x94, 0xa8, 0xe8, 0x2f, 0x00, 0x17, 0x85, 0xa8, 0x81, 0xe4, 0x5e, 0x96, 0xf1, 0x68, 0xa5, 0xec,
	0x4d, 0x2f, 0xc0, 0x99, 0xea, 0x8c, 0xe9, 0x63, 0xb4, 0x9d, 0x8d, 0x49, 0xfc, 0xaa, 0x1c, 0x38,
	0xf7, 0x07, 0x80, 0x2f, 0x0b, 0xda, 0x23, 0xd7, 0xe4, 0x5e, 0x98, 0xd9, 0xc8, 0x92, 0xe3, 0xa0,
	0xba, 0xcd, 0xc8, 0xd6, 0x50, 0x55, 0x9e, 0x8c, 0x19, 0x25, 0xa4, 0x07, 0x49, 0xa3, 0xc6, 0xd3,
	0x92, 0xa4, 0x51, 0x09, 0x39, 0x48, 0xd6, 0x28, 0xf1, 0x67, 0x8b, 0x88, 0x51, 0x82, 0xb6, 0xbc,
	0x51, 0xb3, 0x91, 0x25, 0x27, 0x3c, 0x59, 0xa3, 0x44, 0x32, 0xf4, 0x08, 0xe0, 0x52, 0xec, 0xff,
	0xbd, 0x64, 0x73, 0x4c, 0xce, 0x3b, 0x92, 0xcd, 0x31, 0x25, 0xc9, 0xa8, 0x87, 0x0c, 0x6d, 0x0f,
	0xed, 0x64, 0x43, 0x8b, 0xff, 0x9c, 0x14, 0x18, 0xf7, 0x2f, 0x80, 0x28, 0xb6, 0x87, 0x7c, 0x6f,
	0x9c, 0x9d, 0x34, 0x3d, 0xb3, 0xa9, 0x3b, 0x8c, 0x74, 0x13, 0xad, 0x4f, 0x47, 0x5a, 0x3f, 0xb9,
	0xbd, 0x2f, 0x83, 0xe1, 0x7d, 0x19, 0xdc, 0xdd, 0x97, 0xc1, 0x8f, 0x0f, 0xe5, 0xc2, 0xf0, 0xa1,
	0x5c, 0xf8, 0xfb, 0xa1, 0x5c, 0xf8, 0x6a, 0xc3, 0xe8, 0xb8, 0x17, 0xfd, 0xa6, 0xd6, 0xa2, 0xdd,
	0x89, 0xda, 0xd7, 0x82, 0xfa, 0x8d, 0x4d, 0x9c, 0xe6, 0x02, 0xfb, 0x31, 0x6e, 0xf5, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0xc4, 0x5e, 0x02, 0xd9, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a FeeBalance by index.
	FeeBalance(ctx context.Context, in *QueryGetFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetFeeBalanceResponse, error)
	// Queries a list of FeeBalance items.
	FeeBalanceAll(ctx context.Context, in *QueryAllFeeBalanceRequest, opts ...grpc.CallOption) (*QueryAllFeeBalanceResponse, error)
	// Queries a KeysignVoteData by index.
	KeysignVoteData(ctx context.Context, in *QueryGetKeysignVoteDataRequest, opts ...grpc.CallOption) (*QueryGetKeysignVoteDataResponse, error)
	// Queries a list of KeysignVoteData items.
	KeysignVoteDataAll(ctx context.Context, in *QueryAllKeysignVoteDataRequest, opts ...grpc.CallOption) (*QueryAllKeysignVoteDataResponse, error)
	// Queries a ObserveVote by index.
	ObserveVote(ctx context.Context, in *QueryGetObserveVoteRequest, opts ...grpc.CallOption) (*QueryGetObserveVoteResponse, error)
	// Queries a list of ObserveVote items.
	ObserveVoteAll(ctx context.Context, in *QueryAllObserveVoteRequest, opts ...grpc.CallOption) (*QueryAllObserveVoteResponse, error)
	// Queries a PoolBalance by index.
	PoolBalance(ctx context.Context, in *QueryGetPoolBalanceRequest, opts ...grpc.CallOption) (*QueryGetPoolBalanceResponse, error)
	// Queries a list of PoolBalance items.
	PoolBalanceAll(ctx context.Context, in *QueryAllPoolBalanceRequest, opts ...grpc.CallOption) (*QueryAllPoolBalanceResponse, error)
	// Queries a TransactionData by index.
	TransactionData(ctx context.Context, in *QueryGetTransactionDataRequest, opts ...grpc.CallOption) (*QueryGetTransactionDataResponse, error)
	// Queries a list of TransactionData items.
	TransactionDataAll(ctx context.Context, in *QueryAllTransactionDataRequest, opts ...grpc.CallOption) (*QueryAllTransactionDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeBalance(ctx context.Context, in *QueryGetFeeBalanceRequest, opts ...grpc.CallOption) (*QueryGetFeeBalanceResponse, error) {
	out := new(QueryGetFeeBalanceResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/FeeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeBalanceAll(ctx context.Context, in *QueryAllFeeBalanceRequest, opts ...grpc.CallOption) (*QueryAllFeeBalanceResponse, error) {
	out := new(QueryAllFeeBalanceResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/FeeBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeysignVoteData(ctx context.Context, in *QueryGetKeysignVoteDataRequest, opts ...grpc.CallOption) (*QueryGetKeysignVoteDataResponse, error) {
	out := new(QueryGetKeysignVoteDataResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/KeysignVoteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeysignVoteDataAll(ctx context.Context, in *QueryAllKeysignVoteDataRequest, opts ...grpc.CallOption) (*QueryAllKeysignVoteDataResponse, error) {
	out := new(QueryAllKeysignVoteDataResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/KeysignVoteDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserveVote(ctx context.Context, in *QueryGetObserveVoteRequest, opts ...grpc.CallOption) (*QueryGetObserveVoteResponse, error) {
	out := new(QueryGetObserveVoteResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/ObserveVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserveVoteAll(ctx context.Context, in *QueryAllObserveVoteRequest, opts ...grpc.CallOption) (*QueryAllObserveVoteResponse, error) {
	out := new(QueryAllObserveVoteResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/ObserveVoteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBalance(ctx context.Context, in *QueryGetPoolBalanceRequest, opts ...grpc.CallOption) (*QueryGetPoolBalanceResponse, error) {
	out := new(QueryGetPoolBalanceResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/PoolBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolBalanceAll(ctx context.Context, in *QueryAllPoolBalanceRequest, opts ...grpc.CallOption) (*QueryAllPoolBalanceResponse, error) {
	out := new(QueryAllPoolBalanceResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/PoolBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionData(ctx context.Context, in *QueryGetTransactionDataRequest, opts ...grpc.CallOption) (*QueryGetTransactionDataResponse, error) {
	out := new(QueryGetTransactionDataResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/TransactionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionDataAll(ctx context.Context, in *QueryAllTransactionDataRequest, opts ...grpc.CallOption) (*QueryAllTransactionDataResponse, error) {
	out := new(QueryAllTransactionDataResponse)
	err := c.cc.Invoke(ctx, "/vigorousdeveloper.pochuman.pochuman.Query/TransactionDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a FeeBalance by index.
	FeeBalance(context.Context, *QueryGetFeeBalanceRequest) (*QueryGetFeeBalanceResponse, error)
	// Queries a list of FeeBalance items.
	FeeBalanceAll(context.Context, *QueryAllFeeBalanceRequest) (*QueryAllFeeBalanceResponse, error)
	// Queries a KeysignVoteData by index.
	KeysignVoteData(context.Context, *QueryGetKeysignVoteDataRequest) (*QueryGetKeysignVoteDataResponse, error)
	// Queries a list of KeysignVoteData items.
	KeysignVoteDataAll(context.Context, *QueryAllKeysignVoteDataRequest) (*QueryAllKeysignVoteDataResponse, error)
	// Queries a ObserveVote by index.
	ObserveVote(context.Context, *QueryGetObserveVoteRequest) (*QueryGetObserveVoteResponse, error)
	// Queries a list of ObserveVote items.
	ObserveVoteAll(context.Context, *QueryAllObserveVoteRequest) (*QueryAllObserveVoteResponse, error)
	// Queries a PoolBalance by index.
	PoolBalance(context.Context, *QueryGetPoolBalanceRequest) (*QueryGetPoolBalanceResponse, error)
	// Queries a list of PoolBalance items.
	PoolBalanceAll(context.Context, *QueryAllPoolBalanceRequest) (*QueryAllPoolBalanceResponse, error)
	// Queries a TransactionData by index.
	TransactionData(context.Context, *QueryGetTransactionDataRequest) (*QueryGetTransactionDataResponse, error)
	// Queries a list of TransactionData items.
	TransactionDataAll(context.Context, *QueryAllTransactionDataRequest) (*QueryAllTransactionDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FeeBalance(ctx context.Context, req *QueryGetFeeBalanceRequest) (*QueryGetFeeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeBalance not implemented")
}
func (*UnimplementedQueryServer) FeeBalanceAll(ctx context.Context, req *QueryAllFeeBalanceRequest) (*QueryAllFeeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeBalanceAll not implemented")
}
func (*UnimplementedQueryServer) KeysignVoteData(ctx context.Context, req *QueryGetKeysignVoteDataRequest) (*QueryGetKeysignVoteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeysignVoteData not implemented")
}
func (*UnimplementedQueryServer) KeysignVoteDataAll(ctx context.Context, req *QueryAllKeysignVoteDataRequest) (*QueryAllKeysignVoteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeysignVoteDataAll not implemented")
}
func (*UnimplementedQueryServer) ObserveVote(ctx context.Context, req *QueryGetObserveVoteRequest) (*QueryGetObserveVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserveVote not implemented")
}
func (*UnimplementedQueryServer) ObserveVoteAll(ctx context.Context, req *QueryAllObserveVoteRequest) (*QueryAllObserveVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserveVoteAll not implemented")
}
func (*UnimplementedQueryServer) PoolBalance(ctx context.Context, req *QueryGetPoolBalanceRequest) (*QueryGetPoolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBalance not implemented")
}
func (*UnimplementedQueryServer) PoolBalanceAll(ctx context.Context, req *QueryAllPoolBalanceRequest) (*QueryAllPoolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolBalanceAll not implemented")
}
func (*UnimplementedQueryServer) TransactionData(ctx context.Context, req *QueryGetTransactionDataRequest) (*QueryGetTransactionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionData not implemented")
}
func (*UnimplementedQueryServer) TransactionDataAll(ctx context.Context, req *QueryAllTransactionDataRequest) (*QueryAllTransactionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionDataAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/FeeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeBalance(ctx, req.(*QueryGetFeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/FeeBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeBalanceAll(ctx, req.(*QueryAllFeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeysignVoteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeysignVoteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeysignVoteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/KeysignVoteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeysignVoteData(ctx, req.(*QueryGetKeysignVoteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeysignVoteDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKeysignVoteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeysignVoteDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/KeysignVoteDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeysignVoteDataAll(ctx, req.(*QueryAllKeysignVoteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserveVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetObserveVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserveVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/ObserveVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserveVote(ctx, req.(*QueryGetObserveVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserveVoteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllObserveVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserveVoteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/ObserveVoteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserveVoteAll(ctx, req.(*QueryAllObserveVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/PoolBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBalance(ctx, req.(*QueryGetPoolBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/PoolBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolBalanceAll(ctx, req.(*QueryAllPoolBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/TransactionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionData(ctx, req.(*QueryGetTransactionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTransactionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vigorousdeveloper.pochuman.pochuman.Query/TransactionDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionDataAll(ctx, req.(*QueryAllTransactionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vigorousdeveloper.pochuman.pochuman.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FeeBalance",
			Handler:    _Query_FeeBalance_Handler,
		},
		{
			MethodName: "FeeBalanceAll",
			Handler:    _Query_FeeBalanceAll_Handler,
		},
		{
			MethodName: "KeysignVoteData",
			Handler:    _Query_KeysignVoteData_Handler,
		},
		{
			MethodName: "KeysignVoteDataAll",
			Handler:    _Query_KeysignVoteDataAll_Handler,
		},
		{
			MethodName: "ObserveVote",
			Handler:    _Query_ObserveVote_Handler,
		},
		{
			MethodName: "ObserveVoteAll",
			Handler:    _Query_ObserveVoteAll_Handler,
		},
		{
			MethodName: "PoolBalance",
			Handler:    _Query_PoolBalance_Handler,
		},
		{
			MethodName: "PoolBalanceAll",
			Handler:    _Query_PoolBalanceAll_Handler,
		},
		{
			MethodName: "TransactionData",
			Handler:    _Query_TransactionData_Handler,
		},
		{
			MethodName: "TransactionDataAll",
			Handler:    _Query_TransactionDataAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pochuman/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeBalance) > 0 {
		for iNdEx := len(m.FeeBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeysignVoteDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeysignVoteDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeysignVoteDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeysignVoteDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeysignVoteDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeysignVoteDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KeysignVoteData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKeysignVoteDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeysignVoteDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeysignVoteDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKeysignVoteDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeysignVoteDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeysignVoteDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeysignVoteData) > 0 {
		for iNdEx := len(m.KeysignVoteData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeysignVoteData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetObserveVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetObserveVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetObserveVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetObserveVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetObserveVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetObserveVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ObserveVote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllObserveVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllObserveVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllObserveVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllObserveVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllObserveVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllObserveVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObserveVote) > 0 {
		for iNdEx := len(m.ObserveVote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObserveVote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolBalance) > 0 {
		for iNdEx := len(m.PoolBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransactionDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransactionDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransactionDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransactionDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransactionDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransactionDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TransactionData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTransactionDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransactionDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransactionDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTransactionDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransactionDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransactionDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionData) > 0 {
		for iNdEx := len(m.TransactionData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransactionData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFeeBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeeBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeeBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeBalance) > 0 {
		for _, e := range m.FeeBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeysignVoteDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeysignVoteDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KeysignVoteData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKeysignVoteDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKeysignVoteDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeysignVoteData) > 0 {
		for _, e := range m.KeysignVoteData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetObserveVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetObserveVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObserveVote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllObserveVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllObserveVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObserveVote) > 0 {
		for _, e := range m.ObserveVote {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolBalance) > 0 {
		for _, e := range m.PoolBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTransactionDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTransactionDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TransactionData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTransactionDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTransactionDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransactionData) > 0 {
		for _, e := range m.TransactionData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeBalance = append(m.FeeBalance, FeeBalance{})
			if err := m.FeeBalance[len(m.FeeBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeysignVoteDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeysignVoteDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeysignVoteDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeysignVoteDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeysignVoteDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeysignVoteDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignVoteData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeysignVoteData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeysignVoteDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeysignVoteDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeysignVoteDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeysignVoteDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeysignVoteDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeysignVoteDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignVoteData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeysignVoteData = append(m.KeysignVoteData, KeysignVoteData{})
			if err := m.KeysignVoteData[len(m.KeysignVoteData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetObserveVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetObserveVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetObserveVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetObserveVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetObserveVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetObserveVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserveVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObserveVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllObserveVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllObserveVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllObserveVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllObserveVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllObserveVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllObserveVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserveVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserveVote = append(m.ObserveVote, ObserveVote{})
			if err := m.ObserveVote[len(m.ObserveVote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolBalance = append(m.PoolBalance, PoolBalance{})
			if err := m.PoolBalance[len(m.PoolBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransactionDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransactionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransactionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransactionDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransactionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransactionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransactionData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransactionDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransactionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransactionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransactionDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransactionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransactionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionData = append(m.TransactionData, TransactionData{})
			if err := m.TransactionData[len(m.TransactionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
